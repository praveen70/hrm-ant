{"ast":null,"code":"import _classCallCheck from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectWithoutProperties from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/praveen/Documents/Praveen-codes/HRM/client/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport Login from \"./component/login/login\";\nimport Home from \"./component/dashboard/home/home\"; //import CreateEmployee from './component/createEmployee/createEmployee'\n\nimport Addemployee from \"./component/dashboard/addEmployee/addEmployee\";\nimport withSession from \"./component/withSession\";\nimport Employee from \"./component/dashboard/createEmployee/index\";\nimport Professionalinformation from \"./component/dashboard/employeeProfessionalInfo/index\";\nimport Educationinformation from \"./component/dashboard/employeeEducationInformation/index\";\nimport Documents from \"./component/dashboard/documents/index\";\nimport Employetable from \"./component/dashboard/allEmployeTable/index\";\nimport Delete from \"./component/dashboard/deleteEmployee/index\";\nimport Updateemployee from \"./component/dashboard/updateEmployee/index\";\nimport Allemployee from \"./component/dashboard/defaultPage/index\";\nimport Rollbased from \"./component/dashboard/rollBased/rollBased\";\nimport Spinner from './component/spinner/index';\nimport { hasRole, isAllowed } from \"./auth\";\nimport decode from \"jwt-decode\"; // import Layout from './layout/index'\n\nvar checkAuth = function checkAuth() {\n  var token = localStorage.getItem(\"token\");\n  console.log(\"i am token \", token);\n  var refreshToken = localStorage.getItem(\"refreshToken\");\n\n  if (!token || !refreshToken) {\n    return false;\n  }\n\n  try {\n    // { exp: 12903819203 }\n    var _decode = decode(refreshToken),\n        exp = _decode.exp;\n\n    if (exp < new Date().getTime() / 1000) {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\nvar AuthRoute = function AuthRoute(_ref) {\n  var Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: function render(props) {\n      return checkAuth() ? React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      })) : React.createElement(Redirect, {\n        to: {\n          pathname: \"/login\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n}; // const fakeAuth = {\n//   isAuthenticated: true,\n//   authenticate(cb){\n//     this.isAuthenticated = true\n//     setTimeout(cb, 100)\n//   },\n//   signout(cb) {\n//     this.isAuthenticated = false\n//     setTimeout(cb, 100)\n//   }\n// }\n// const PrivateRoute = ({ component: Component, ...rest }) => (\n//   <Route {...rest} render = {(props) => (\n//     fakeAuth.isAuthenticated === true ? <Component {...props} /> : <Redirect to ={{\n//       pathname: '/',\n//       state:{ from: props.location }\n//     }} />\n//   )} />\n// )\n\n\nvar Root =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Root, _React$Component);\n\n  function Root() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Root);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Root)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: true // loginHandle = () => {\n      //   this.setState(prevState => ({\n      //    loggedIn: !prevState.loggedIn\n      //   }))\n      // }\n\n    };\n\n    _this.componentDidMount = function () {\n      _this.setState({\n        loading: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Root, [{\n    key: \"render\",\n    value: function render() {\n      if (this.state.loading) {\n        return React.createElement(Spinner, {\n          size: \"8x\",\n          spinning: \"spinning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        component: Login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/home\",\n        component: Home,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/createEmployee\",\n        component: Employee,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/addEmployee\",\n        render: function render() {\n          return React.createElement(Addemployee, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/employeeProfessionalInfo\",\n        render: function render() {\n          return React.createElement(Professionalinformation, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/employeeEducationInformation\",\n        render: function render() {\n          return React.createElement(Educationinformation, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/documents\",\n        render: function render() {\n          return React.createElement(Documents, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/allEmployeeTable\",\n        render: function render() {\n          return React.createElement(Employetable, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/deleteEmployee:_id\",\n        component: Delete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/updateEmployee/:_id\",\n        component: Updateemployee,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/defaultPage\",\n        render: function render() {\n          return React.createElement(Allemployee, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/rollBased\",\n        component: Rollbased,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Root;\n}(React.Component); // const Root = ({ refetch, session, user }) => (\n//   <div>\n//     <Router>\n//       <Switch>\n//         <Route exact path=\"/\" render={() => <Login session={session} />} />\n//         {/* <PrivateRoute path = '/home' component={Home} /> */}\n//         {/*<AuthRoute exact path=\"/Auth\" component={Auth} />*/}\n//         {/* {hasRole(user, ['admin']) && <Route path='/home' component={Home} />} */}\n//         <Route path=\"/home\" render={() => <Home session={session} />} />\n//         {/* <Route path=\"/home\" render={()=>(\n//           this.state.loggedIn ? ( <Home />) : (<Redirect to='/' />)  /> */}\n//         {/* <Route path=\"/home\" render={({match})=>(this.state.loggedIn ? ( <Home username={match.params.username} />) : (<Redirect to='/' />))}/> */}\n//         <Route path=\"/createEmployee\" component={Employee} />\n//         <Route path=\"/addEmployee\" render={() => <Addemployee />} />\n//         <Route\n//           path=\"/employeeProfessionalInfo\"\n//           render={() => <Professionalinformation />}\n//         />\n//         <Route\n//           path=\"/employeeEducationInformation\"\n//           render={() => <Educationinformation />}\n//         />\n//         <Route path=\"/documents\" render={() => <Documents />} />\n//         <Route path=\"/allEmployeeTable\" render={() => <Employetable />} />\n//         <Route path=\"/deleteEmployee:_id\" component={Delete} />\n//         <Route path=\"/updateEmployee/:_id\" component={Updateemployee} />\n//         <Route path=\"/defaultPage\" render={() => <Allemployee />} />\n//         <Route path=\"/rollBased\" component={Rollbased} />\n//       </Switch>\n//     </Router>\n//   </div>\n// );\n//const RootWithSession = withSession(Root);\n\n\nexport default withSession(Root);","map":{"version":3,"sources":["/home/praveen/Documents/Praveen-codes/HRM/client/src/App.js"],"names":["React","BrowserRouter","Router","Route","Switch","Redirect","Login","Home","Addemployee","withSession","Employee","Professionalinformation","Educationinformation","Documents","Employetable","Delete","Updateemployee","Allemployee","Rollbased","Spinner","hasRole","isAllowed","decode","checkAuth","token","localStorage","getItem","console","log","refreshToken","exp","Date","getTime","e","AuthRoute","Component","component","rest","props","pathname","Root","state","loading","componentDidMount","setState"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport Login from \"./component/login/login\";\nimport Home from \"./component/dashboard/home/home\";\n//import CreateEmployee from './component/createEmployee/createEmployee'\nimport Addemployee from \"./component/dashboard/addEmployee/addEmployee\";\nimport withSession from \"./component/withSession\";\nimport Employee from \"./component/dashboard/createEmployee/index\";\nimport Professionalinformation from \"./component/dashboard/employeeProfessionalInfo/index\";\nimport Educationinformation from \"./component/dashboard/employeeEducationInformation/index\";\nimport Documents from \"./component/dashboard/documents/index\";\nimport Employetable from \"./component/dashboard/allEmployeTable/index\";\nimport Delete from \"./component/dashboard/deleteEmployee/index\";\nimport Updateemployee from \"./component/dashboard/updateEmployee/index\";\nimport Allemployee from \"./component/dashboard/defaultPage/index\";\nimport Rollbased from \"./component/dashboard/rollBased/rollBased\";\nimport Spinner from './component/spinner/index'\n\nimport { hasRole, isAllowed } from \"./auth\";\nimport decode from \"jwt-decode\";\n\n// import Layout from './layout/index'\n\nconst checkAuth = () => {\n  const token = localStorage.getItem(\"token\");\n  console.log(\"i am token \", token);\n  const refreshToken = localStorage.getItem(\"refreshToken\");\n  if (!token || !refreshToken) {\n    return false;\n  }\n\n  try {\n    // { exp: 12903819203 }\n    const { exp } = decode(refreshToken);\n\n    if (exp < new Date().getTime() / 1000) {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\nconst AuthRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      checkAuth() ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to={{ pathname: \"/login\" }} />\n      )\n    }\n  />\n);\n\n// const fakeAuth = {\n//   isAuthenticated: true,\n//   authenticate(cb){\n//     this.isAuthenticated = true\n//     setTimeout(cb, 100)\n//   },\n//   signout(cb) {\n//     this.isAuthenticated = false\n//     setTimeout(cb, 100)\n//   }\n// }\n\n// const PrivateRoute = ({ component: Component, ...rest }) => (\n//   <Route {...rest} render = {(props) => (\n//     fakeAuth.isAuthenticated === true ? <Component {...props} /> : <Redirect to ={{\n//       pathname: '/',\n//       state:{ from: props.location }\n//     }} />\n\n//   )} />\n\n// )\n\nclass Root extends React.Component {\n  state = {\n    loading: true\n}\n\n  // loginHandle = () => {\n  //   this.setState(prevState => ({\n  //    loggedIn: !prevState.loggedIn\n  //   }))\n  // }\n\n  componentDidMount = () => {\n\n        this.setState({ loading: false })\n      \n}\n\n  render() {\n    if (this.state.loading) {\n      return <Spinner size='8x' spinning='spinning' />\n}\n    return (\n      <div>\n      <Router>\n        <Switch>\n          <Route exact path = \"/\" component={Login}  />\n          {/* <PrivateRoute path = '/home' component={Home} /> */}\n        {/*<AuthRoute exact path=\"/Auth\" component={Auth} />*/}\n\n          <Route path ='/home' component={Home} />\n          {/* <Route path=\"/home\" render={()=>(\n          this.state.loggedIn ? ( <Home />) : (<Redirect to='/' />)  /> */}\n          {/* <Route path=\"/home\" render={({match})=>(this.state.loggedIn ? ( <Home username={match.params.username} />) : (<Redirect to='/' />))}/> */}\n          <Route path=\"/createEmployee\" component={Employee} />\n          <Route path=\"/addEmployee\" render={() => <Addemployee />} />\n          <Route path=\"/employeeProfessionalInfo\"\n            render={() => <Professionalinformation />}\n          />\n          <Route path=\"/employeeEducationInformation\"\n            render={() => <Educationinformation />}\n          />\n          <Route path=\"/documents\" render={() => <Documents />} />\n          <Route path=\"/allEmployeeTable\" render={() => <Employetable />} />\n          <Route path=\"/deleteEmployee:_id\" component={Delete} />\n          <Route path=\"/updateEmployee/:_id\" component={Updateemployee} />\n          <Route path=\"/defaultPage\" render={() => <Allemployee />} />\n          <Route path=\"/rollBased\" component={Rollbased} />\n        </Switch>\n      </Router>\n    </div>\n\n    );\n  }\n}\n\n// const Root = ({ refetch, session, user }) => (\n//   <div>\n//     <Router>\n//       <Switch>\n//         <Route exact path=\"/\" render={() => <Login session={session} />} />\n//         {/* <PrivateRoute path = '/home' component={Home} /> */}\n//         {/*<AuthRoute exact path=\"/Auth\" component={Auth} />*/}\n//         {/* {hasRole(user, ['admin']) && <Route path='/home' component={Home} />} */}\n//         <Route path=\"/home\" render={() => <Home session={session} />} />\n//         {/* <Route path=\"/home\" render={()=>(\n//           this.state.loggedIn ? ( <Home />) : (<Redirect to='/' />)  /> */}\n//         {/* <Route path=\"/home\" render={({match})=>(this.state.loggedIn ? ( <Home username={match.params.username} />) : (<Redirect to='/' />))}/> */}\n//         <Route path=\"/createEmployee\" component={Employee} />\n//         <Route path=\"/addEmployee\" render={() => <Addemployee />} />\n//         <Route\n//           path=\"/employeeProfessionalInfo\"\n//           render={() => <Professionalinformation />}\n//         />\n//         <Route\n//           path=\"/employeeEducationInformation\"\n//           render={() => <Educationinformation />}\n//         />\n//         <Route path=\"/documents\" render={() => <Documents />} />\n//         <Route path=\"/allEmployeeTable\" render={() => <Employetable />} />\n//         <Route path=\"/deleteEmployee:_id\" component={Delete} />\n//         <Route path=\"/updateEmployee/:_id\" component={Updateemployee} />\n//         <Route path=\"/defaultPage\" render={() => <Allemployee />} />\n//         <Route path=\"/rollBased\" component={Rollbased} />\n//       </Switch>\n//     </Router>\n//   </div>\n// );\n\n//const RootWithSession = withSession(Root);\n\nexport default withSession(Root);\n"]},"metadata":{},"sourceType":"module"}