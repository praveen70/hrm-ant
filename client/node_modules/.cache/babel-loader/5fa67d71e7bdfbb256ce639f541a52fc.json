{"ast":null,"code":"import _classCallCheck from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectWithoutProperties from \"/home/praveen/Documents/Praveen-codes/HRM/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/home/praveen/Documents/Praveen-codes/HRM/client/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Login from './component/login/login';\nimport Home from './component/dashboard/home/home'; //import CreateEmployee from './component/createEmployee/createEmployee'\n\nimport Addemployee from './component/dashboard/addEmployee/addEmployee';\nimport withSession from './component/withSession';\nimport Employee from './component/dashboard/createEmployee/index';\nimport Professionalinformation from './component/dashboard/employeeProfessionalInfo/index';\nimport Educationinformation from './component/dashboard/employeeEducationInformation/index';\nimport Documents from './component/dashboard/documents/index';\nimport Employetable from './component/dashboard/allEmployeTable/index';\nimport Delete from './component/dashboard/deleteEmployee/index';\nimport Updateemployee from './component/dashboard/updateEmployee/index';\nimport Allemployee from './component/dashboard/defaultPage/index';\nimport Rollbased from './component/dashboard/rollBased/rollBased';\nimport Spinner from './component/spinner/index';\nimport { hasRole, isAllowed } from './auth';\nimport decode from 'jwt-decode'; // import Layout from './layout/index'\n\nvar checkAuth = function checkAuth() {\n  var token = localStorage.getItem('token');\n  console.log('i am token ', token);\n  var refreshToken = localStorage.getItem('refreshToken');\n\n  if (!token || !refreshToken) {\n    return false;\n  }\n\n  try {\n    // { exp: 12903819203 }\n    var _decode = decode(refreshToken),\n        exp = _decode.exp;\n\n    if (exp < new Date().getTime() / 1000) {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n};\n\nvar AuthRoute = function AuthRoute(_ref) {\n  var Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: function render(props) {\n      return checkAuth() ? React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      })) : React.createElement(Redirect, {\n        to: {\n          pathname: '/login'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n}; // const fakeAuth = {\n//   isAuthenticated: true,\n//   authenticate(cb){\n//     this.isAuthenticated = true\n//     setTimeout(cb, 100)\n//   },\n//   signout(cb) {\n//     this.isAuthenticated = false\n//     setTimeout(cb, 100)\n//   }\n// }\n// const PrivateRoute = ({ component: Component, ...rest }) => (\n//   <Route {...rest} render = {(props) => (\n//     fakeAuth.isAuthenticated === true ? <Component {...props} /> : <Redirect to ={{\n//       pathname: '/',\n//       state:{ from: props.location }\n//     }} />\n//   )} />\n// )\n\n\nvar Root =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Root, _React$Component);\n\n  function Root() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Root);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Root)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(Root, [{\n    key: \"render\",\n    // loginHandle = () => {\n    //   this.setState(prevState => ({\n    //    loggedIn: !prevState.loggedIn\n    //   }))\n    // }\n    // componentDidMount = () => {\n    // \tthis.setState({ loading: false });\n    // };\n    value: function render() {\n      // if (this.state.loading) {\n      // \treturn <Spinner size=\"8x\" spinning=\"spinning\" />;\n      // }\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Switch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        component: Login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/home\",\n        component: Home,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/createEmployee\",\n        component: Employee,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/addEmployee\",\n        render: function render() {\n          return React.createElement(Addemployee, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/employeeProfessionalInfo\",\n        render: function render() {\n          return React.createElement(Professionalinformation, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 110\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/employeeEducationInformation\",\n        render: function render() {\n          return React.createElement(Educationinformation, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/documents\",\n        render: function render() {\n          return React.createElement(Documents, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/allEmployeeTable\",\n        render: function render() {\n          return React.createElement(Employetable, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/deleteEmployee:_id\",\n        component: Delete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/updateEmployee/:_id\",\n        component: Updateemployee,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/defaultPage\",\n        render: function render() {\n          return React.createElement(Allemployee, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/rollBased\",\n        component: Rollbased,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Root;\n}(React.Component); // const Root = ({ refetch, session, user }) => (\n//   <div>\n//     <Router>\n//       <Switch>\n//         <Route exact path=\"/\" render={() => <Login session={session} />} />\n//         {/* <PrivateRoute path = '/home' component={Home} /> */}\n//         {/*<AuthRoute exact path=\"/Auth\" component={Auth} />*/}\n//         {/* {hasRole(user, ['admin']) && <Route path='/home' component={Home} />} */}\n//         <Route path=\"/home\" render={() => <Home session={session} />} />\n//         {/* <Route path=\"/home\" render={()=>(\n//           this.state.loggedIn ? ( <Home />) : (<Redirect to='/' />)  /> */}\n//         {/* <Route path=\"/home\" render={({match})=>(this.state.loggedIn ? ( <Home username={match.params.username} />) : (<Redirect to='/' />))}/> */}\n//         <Route path=\"/createEmployee\" component={Employee} />\n//         <Route path=\"/addEmployee\" render={() => <Addemployee />} />\n//         <Route\n//           path=\"/employeeProfessionalInfo\"\n//           render={() => <Professionalinformation />}\n//         />\n//         <Route\n//           path=\"/employeeEducationInformation\"\n//           render={() => <Educationinformation />}\n//         />\n//         <Route path=\"/documents\" render={() => <Documents />} />\n//         <Route path=\"/allEmployeeTable\" render={() => <Employetable />} />\n//         <Route path=\"/deleteEmployee:_id\" component={Delete} />\n//         <Route path=\"/updateEmployee/:_id\" component={Updateemployee} />\n//         <Route path=\"/defaultPage\" render={() => <Allemployee />} />\n//         <Route path=\"/rollBased\" component={Rollbased} />\n//       </Switch>\n//     </Router>\n//   </div>\n// );\n//const RootWithSession = withSession(Root);\n\n\nexport default withSession(Root);","map":{"version":3,"sources":["/home/praveen/Documents/Praveen-codes/HRM/client/src/App.js"],"names":["React","BrowserRouter","Router","Route","Switch","Redirect","Login","Home","Addemployee","withSession","Employee","Professionalinformation","Educationinformation","Documents","Employetable","Delete","Updateemployee","Allemployee","Rollbased","Spinner","hasRole","isAllowed","decode","checkAuth","token","localStorage","getItem","console","log","refreshToken","exp","Date","getTime","e","AuthRoute","Component","component","rest","props","pathname","Root","state","loading"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport Login from './component/login/login';\nimport Home from './component/dashboard/home/home';\n//import CreateEmployee from './component/createEmployee/createEmployee'\nimport Addemployee from './component/dashboard/addEmployee/addEmployee';\nimport withSession from './component/withSession';\nimport Employee from './component/dashboard/createEmployee/index';\nimport Professionalinformation from './component/dashboard/employeeProfessionalInfo/index';\nimport Educationinformation from './component/dashboard/employeeEducationInformation/index';\nimport Documents from './component/dashboard/documents/index';\nimport Employetable from './component/dashboard/allEmployeTable/index';\nimport Delete from './component/dashboard/deleteEmployee/index';\nimport Updateemployee from './component/dashboard/updateEmployee/index';\nimport Allemployee from './component/dashboard/defaultPage/index';\nimport Rollbased from './component/dashboard/rollBased/rollBased';\nimport Spinner from './component/spinner/index';\n\nimport { hasRole, isAllowed } from './auth';\nimport decode from 'jwt-decode';\n\n// import Layout from './layout/index'\n\nconst checkAuth = () => {\n\tconst token = localStorage.getItem('token');\n\tconsole.log('i am token ', token);\n\tconst refreshToken = localStorage.getItem('refreshToken');\n\tif (!token || !refreshToken) {\n\t\treturn false;\n\t}\n\n\ttry {\n\t\t// { exp: 12903819203 }\n\t\tconst { exp } = decode(refreshToken);\n\n\t\tif (exp < new Date().getTime() / 1000) {\n\t\t\treturn false;\n\t\t}\n\t} catch (e) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nconst AuthRoute = ({ component: Component, ...rest }) => (\n\t<Route\n\t\t{...rest}\n\t\trender={(props) => (checkAuth() ? <Component {...props} /> : <Redirect to={{ pathname: '/login' }} />)}\n\t/>\n);\n\n// const fakeAuth = {\n//   isAuthenticated: true,\n//   authenticate(cb){\n//     this.isAuthenticated = true\n//     setTimeout(cb, 100)\n//   },\n//   signout(cb) {\n//     this.isAuthenticated = false\n//     setTimeout(cb, 100)\n//   }\n// }\n\n// const PrivateRoute = ({ component: Component, ...rest }) => (\n//   <Route {...rest} render = {(props) => (\n//     fakeAuth.isAuthenticated === true ? <Component {...props} /> : <Redirect to ={{\n//       pathname: '/',\n//       state:{ from: props.location }\n//     }} />\n\n//   )} />\n\n// )\n\nclass Root extends React.Component {\n\tstate = {\n\t\tloading: true\n\t};\n\n\t// loginHandle = () => {\n\t//   this.setState(prevState => ({\n\t//    loggedIn: !prevState.loggedIn\n\t//   }))\n\t// }\n\n\t// componentDidMount = () => {\n\t// \tthis.setState({ loading: false });\n\t// };\n\n\trender() {\n\t\t// if (this.state.loading) {\n\t\t// \treturn <Spinner size=\"8x\" spinning=\"spinning\" />;\n\t\t// }\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Router>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\" component={Login} />\n\t\t\t\t\t\t{/* <PrivateRoute path = '/home' component={Home} /> */}\n\t\t\t\t\t\t{/*<AuthRoute exact path=\"/Auth\" component={Auth} />*/}\n\n\t\t\t\t\t\t<Route path=\"/home\" component={Home} />\n\t\t\t\t\t\t{/* <Route path=\"/home\" render={()=>(\n          this.state.loggedIn ? ( <Home />) : (<Redirect to='/' />)  /> */}\n\t\t\t\t\t\t{/* <Route path=\"/home\" render={({match})=>(this.state.loggedIn ? ( <Home username={match.params.username} />) : (<Redirect to='/' />))}/> */}\n\t\t\t\t\t\t<Route path=\"/createEmployee\" component={Employee} />\n\t\t\t\t\t\t<Route path=\"/addEmployee\" render={() => <Addemployee />} />\n\t\t\t\t\t\t<Route path=\"/employeeProfessionalInfo\" render={() => <Professionalinformation />} />\n\t\t\t\t\t\t<Route path=\"/employeeEducationInformation\" render={() => <Educationinformation />} />\n\t\t\t\t\t\t<Route path=\"/documents\" render={() => <Documents />} />\n\t\t\t\t\t\t<Route path=\"/allEmployeeTable\" render={() => <Employetable />} />\n\t\t\t\t\t\t<Route path=\"/deleteEmployee:_id\" component={Delete} />\n\t\t\t\t\t\t<Route path=\"/updateEmployee/:_id\" component={Updateemployee} />\n\t\t\t\t\t\t<Route path=\"/defaultPage\" render={() => <Allemployee />} />\n\t\t\t\t\t\t<Route path=\"/rollBased\" component={Rollbased} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Router>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// const Root = ({ refetch, session, user }) => (\n//   <div>\n//     <Router>\n//       <Switch>\n//         <Route exact path=\"/\" render={() => <Login session={session} />} />\n//         {/* <PrivateRoute path = '/home' component={Home} /> */}\n//         {/*<AuthRoute exact path=\"/Auth\" component={Auth} />*/}\n//         {/* {hasRole(user, ['admin']) && <Route path='/home' component={Home} />} */}\n//         <Route path=\"/home\" render={() => <Home session={session} />} />\n//         {/* <Route path=\"/home\" render={()=>(\n//           this.state.loggedIn ? ( <Home />) : (<Redirect to='/' />)  /> */}\n//         {/* <Route path=\"/home\" render={({match})=>(this.state.loggedIn ? ( <Home username={match.params.username} />) : (<Redirect to='/' />))}/> */}\n//         <Route path=\"/createEmployee\" component={Employee} />\n//         <Route path=\"/addEmployee\" render={() => <Addemployee />} />\n//         <Route\n//           path=\"/employeeProfessionalInfo\"\n//           render={() => <Professionalinformation />}\n//         />\n//         <Route\n//           path=\"/employeeEducationInformation\"\n//           render={() => <Educationinformation />}\n//         />\n//         <Route path=\"/documents\" render={() => <Documents />} />\n//         <Route path=\"/allEmployeeTable\" render={() => <Employetable />} />\n//         <Route path=\"/deleteEmployee:_id\" component={Delete} />\n//         <Route path=\"/updateEmployee/:_id\" component={Updateemployee} />\n//         <Route path=\"/defaultPage\" render={() => <Allemployee />} />\n//         <Route path=\"/rollBased\" component={Rollbased} />\n//       </Switch>\n//     </Router>\n//   </div>\n// );\n\n//const RootWithSession = withSession(Root);\n\nexport default withSession(Root);\n"]},"metadata":{},"sourceType":"module"}